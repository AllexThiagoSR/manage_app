generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("CONNECTION_PRISMA_URL")
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique
  description String
  employees Employee[]
  @@map("roles")
}

model PaymentStatus {
  id Int @id @default(autoincrement())
  name String @unique
  description String
  services Service[]
  @@map("payment_status")
}

model PaymentType {
  id Int @id @default(autoincrement())
  name String @unique
  description String
  servicePaidWithType ServicePaymentHistory[]
  @@map("payment_types")
}

model ExpenseType {
  id Int @id @default(autoincrement())
  name String @unique
  description String?
  expenses ExpenseHistory[]
  @@map("expense_types")
}

model Employee {
  id Int @id @default(autoincrement())
  firstName String @map("first_name")
  lastName String @map("last_name")
  roleId Int @map("role_id") @default(2)
  role Role @relation(fields: [roleId], references: [id])
  salary Decimal @db.Decimal(12, 2)
  user User?
  @@unique([firstName, lastName])
  @@map("employees")
}

model Service {
  id Int @id @default(autoincrement())
  clientFirstName String @map("client_first_name")
  clientLastName String @map("client_last_name")
  statusId Int @map("status_id") @default(1)
  serviceDate DateTime @map("service_date") @default(now())
  paymentStatus PaymentStatus @relation(fields: [statusId], references: [id])
  items ServiceItem[]
  paymentsHistory ServicePaymentHistory[]
  @@map("services")
}

model ServiceItem {
  serviceId Int @map("service_id")
  description String
  price Decimal @db.Decimal(12, 2)
  quantity Int
  service Service @relation(fields: [serviceId], references: [id])
  @@id([serviceId, description])
  @@map("service_items")
}

model ServicePaymentHistory {
  id Int @id @default(autoincrement())
  serviceId Int @map("service_id")
  service Service @relation(fields: [serviceId], references: [id])
  paidValue Decimal @db.Decimal(12, 2) @map("paid_value")
  paymentTypeId Int @map("payment_type_id")
  paymentType PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentDate DateTime @map("payment_date") @default(now())
  @@map("services_payments_history")
}

model ExpenseHistory {
  id Int @id @default(autoincrement())
  typeId Int @map("type_id")
  type ExpenseType @relation(fields: [typeId], references: [id])
  description String
  value Decimal @db.Decimal(12, 2)
  @@map("expenses_history")
}

model User {
  id Int @id @default(autoincrement())
  fullName String @map("full_name")
  employeeId Int? @unique @map("employee_id")
  employee Employee? @relation(fields: [employeeId], references: [id])
  email String @unique
  password String
  isAdmin Boolean @default(false) @map("is_admin")
  @@map("users")
}